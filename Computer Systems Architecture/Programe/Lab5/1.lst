     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import printf msvcrt.dll 
    10                                  import scanf msvcrt.dll  
    11                                                             ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 0000                        a dw 0
    17 00000002 0000                        b dw 0
    18 00000004 613D00                      m1 db 'a=',0
    19 00000007 623D00                      m2 db 'b=',0
    20 0000000A 256400                      format db '%d',0
    21 0000000D 00000000                    rezultat dd 0
    22 00000011 50726F647573756C20-         mesaj db 'Produsul numerelor este:',0
    22 0000001A 6E756D6572656C6F72-
    22 00000023 20657374653A00     
    23                                      
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ; ...
    28                                          ;Sa se citeasca de la tastatura doua numere (in baza 10) si sa se calculeze produsul lor. Rezultatul ;inmultirii se va salva in memorie in variabila "rezultat" (definita in segmentul de date).
    29                                          
    30 00000000 68[04000000]                    push dword m1; pe stiva se pune adresa string-ului, nu valoarea
    31 00000005 FF15[00000000]                  call [printf];se apeleaza functia printf pentru afisare
    32 0000000B 83C404                          add esp, 4*1; se elibereaza parametrii de pe stiva; 4=dimensiunea unui dword; 1= nr de parametrii 
    33 0000000E 68[00000000]                    push dword a; pe stiva se pune adresa lui a 
    34 00000013 68[0A000000]                    push dword format; 
    35 00000018 FF15[00000000]                  call [scanf]; se apeleazafunctia scanf pentru citire
    36 0000001E 83C408                          add esp, 4*2; se elibereaza parametrii de pe stiva; 4=dimensiunea unui dword; 2=nr de parametrii
    37                                          
    38 00000021 68[07000000]                    push dword m2; pe stiva se pune adresa string-ului m2, nu valoarea
    39 00000026 FF15[00000000]                  call [printf]; se apeleaza functia printf pentru afisare 
    40 0000002C 83C404                          add esp, 4*1; se elibereaza parametrii de pe stiva 
    41 0000002F 68[02000000]                    push dword b; pe stive se pune adresa lui b, nu valoarea sa 
    42 00000034 68[0A000000]                    push dword format
    43 00000039 FF15[00000000]                  call [scanf]; se apeleaza  functia scanf pentru citire
    44 0000003F 83C408                          add esp, 4*2; se elibereaza parametriide pe stiva
    45                                          
    46 00000042 66A1[00000000]                  mov ax,[a]; punem in ax valoarea lui a
    47 00000048 66F725[02000000]                mul word [b]; eax=ax*b=a*b 
    48 0000004F A3[0D000000]                    mov [rezultat],eax; punem in variabila rezultat produsul numerelor
    49                                          
    50 00000054 68[11000000]                    push dword mesaj; pe stiva se pune adresa string-ului mesaj, nu valoarea sa
    51 00000059 FF15[00000000]                  call [printf]; se apeleaza functia printf pentru a afisa mesaj
    52 0000005F 83C404                          add esp, 4*1; se elibereaza parametrii de pe salva; 4=dimensiunea unui dword 1= numarul de parametrii
    53 00000062 FF35[0D000000]                  push dword [rezultat]; se pune pe stiva valoarea variabilei rezultat
    54 00000068 68[0A000000]                    push dword format
    55 0000006D FF15[00000000]                  call [printf]; se  apeleaza functia printf pentru afisare
    56 00000073 83C408                          add esp, 4*2; se elibereaza parametrii de pe salva; 4=dimensiunea unui dword 2= numarul de parametrii
    57                                         
    58                                          
    59                                          ; exit(0)
    60 00000076 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    61 00000078 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
