     1                                  ;x-(a*a+b)/(a+c/a)
     2                                  ;a,c-byte; b-doubleword; x-qword
     3                                  bits 32 ; assembling for the 32 bits architecture
     4                                  
     5                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     6                                  global start        
     7                                  
     8                                  ; declare external functions needed by our program
     9                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    10                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 02                      a db 2
    17 00000001 07000000                b dd 7
    18 00000005 03                      c db 3
    19 00000006 0C00000000000000        x dq 12
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; ...
    24 00000000 A0[00000000]                mov al,[a];al=a
    25 00000005 F62D[00000000]              imul byte [a];ax=a*a
    26 0000000B 6699                        cwd;dx:ax=a*a
    27 0000000D 6652                        push dx
    28 0000000F 6650                        push ax
    29 00000011 5B                          pop ebx;ebx=a*a
    30 00000012 A1[01000000]                mov eax,[b];eax=b
    31 00000017 01D8                        add eax,ebx;eax=eax+ebx=a*a+b
    32 00000019 89C3                        mov ebx,eax;ebx=a*a+b
    33 0000001B A0[05000000]                mov al,[c];al=c
    34 00000020 6698                        cbw;ax=c
    35 00000022 8A0D[00000000]              mov cl,[a];cl=a
    36 00000028 F6F9                        idiv cl;al=ax/cl=c/a ah=ax%cl
    37 0000002A 0205[00000000]              add al,[a];al=al+a=a+c/a
    38 00000030 6698                        cbw;ax=a+c/a
    39 00000032 6689C1                      mov cx,ax;cx=ax=a+c/a
    40 00000035 89D8                        mov eax,ebx;eax=a*a+b
    41 00000037 66F7F9                      idiv cx;ax=eax/cx=(a*a+b)/(a+c/a); dx=eax%cx
    42 0000003A 6652                        push dx
    43 0000003C 6650                        push ax
    44 0000003E 5B                          pop ebx;ebx=(a*a+b)/(a+c/a)
    45 0000003F 99                          cdq;edx:ebx=(a*a+b)/(a+c/a)
    46 00000040 A1[06000000]                mov eax,dword [x]
    47 00000045 130D[0A000000]              adc ecx,dword [x+4];ecx:eax=x
    48 0000004B 29D8                        sub eax,ebx;
    49 0000004D 19D1                        sbb ecx,edx;ecx:eax=x-(a*a+b)/(a+c/a)
    50                                          ; exit(0)
    51 0000004F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    52 00000051 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
