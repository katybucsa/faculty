     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 616263646500                s1 db 'abcde',0
    15                                      l1 equ $-s1
    16 00000006 6163646D7000                s2 db 'acdmp',0
    17                                      l2 equ $-s2
    18 0000000C 00<rept>                    s3 times l1+l2 db 0
    19                                      
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; ...
    24 00000000 BE[00000000]                    mov esi,s1 
    25 00000005 BA[06000000]                    mov edx,s2
    26 0000000A BF[0C000000]                    mov edi,s3
    27                                          repet:
    28 0000000F AC                                  lodsb 
    29 00000010 88C3                                mov bl,al 
    30 00000012 56                                  push esi 
    31 00000013 89D6                                mov esi,edx 
    32 00000015 AC                                  lodsb 
    33 00000016 38D8                                cmp al,bl 
    34 00000018 7202                                jb adauga1 
    35 0000001A EB0C                                jmp adauga2
    36                                              adauga1:
    37 0000001C AA                                      stosb
    38 0000001D 803E00                                  cmp byte [esi],0 
    39 00000020 7414                                    jz final
    40 00000022 89F2                                    mov edx,esi 
    41 00000024 5E                                      pop esi 
    42 00000025 4E                                      dec esi
    43 00000026 EBE7                                    jmp repet
    44                                              adauga2:
    45 00000028 4E                                      dec esi 
    46 00000029 89F2                                    mov edx,esi 
    47 0000002B 5E                                      pop esi 
    48 0000002C 88D8                                    mov al,bl 
    49 0000002E AA                                      stosb
    50 0000002F 803E00                                  cmp byte [esi],0
    51 00000032 740C                                    jz final1
    52 00000034 EBD9                                    jmp repet
    53                                          final:
    54 00000036 5E                                  pop esi 
    55 00000037 4E                                  dec esi
    56                                              repeta:
    57 00000038 A4                                      movsb 
    58 00000039 803E00                                  cmp byte [esi],0
    59 0000003C 75FA                                    jnz repeta
    60 0000003E EB0A                                    jmp fine
    61                                          final1:
    62 00000040 89D6                                mov esi,edx 
    63                                              repeta1:
    64 00000042 A4                                      movsb 
    65 00000043 803E00                                  cmp byte [esi],0
    66 00000046 75FA                                    jnz repeta1
    67 00000048 EB00                                    jmp fine
    68                                          fine:
    69                                          
    70                                          
    71                                          ; exit(0)
    72 0000004A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    73 0000004C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
