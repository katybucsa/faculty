     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 FFFF                        a dw -1
    15 00000002 02                          b db 2
    16 00000003 5F                          c db 95
    17 00000004 E8030000                    e dd 1000
    18 00000008 0100000000000000            x dq 1 
    19 00000010 FFFFFFFFFFFFFFFF            rez dq -1
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25                                          
    26                                          ;a*b-(100-c)/(b*b)+e+x
    27                                          ;a-word; b,c-byte; e-doubleword; x-qword
    28                                      
    29                                      
    30                                      
    31 00000000 B064                        mov al,100
    32 00000002 2A05[03000000]              sub al,[c];al=100-c
    33 00000008 88C3                        mov bl,al
    34 0000000A A0[02000000]                mov al,[b]
    35 0000000F F62D[02000000]              imul byte [b]  ;ax=b*b
    36 00000015 6689C1                      mov cx,ax ; cx=b*b 
    37 00000018 6698                        cbw
    38 0000001A 6699                        cwd  ;dx:ax=100-c
    39                                      
    40 0000001C 66F7F9                      idiv cx  ;ax=(100-c)/(b*b) ,dx=rest
    41 0000001F 6689C1                      mov cx,ax
    42 00000022 A0[02000000]                mov al,[b]
    43 00000027 6698                        cbw
    44 00000029 66F72D[00000000]            imul word [a]; dx:ax=a*b
    45 00000030 6652                        push dx
    46 00000032 6650                        push ax
    47 00000034 5B                          pop ebx ;ebx=a*b
    48 00000035 6689C8                      mov ax,cx
    49 00000038 6699                        cwd  ;dx:ax=(100-c)/(b*b)
    50 0000003A 6652                        push dx
    51 0000003C 6650                        push ax
    52 0000003E 58                          pop eax
    53 0000003F 29C3                        sub ebx,eax ;ebx=a*b-(100-c)/b*b
    54 00000041 031D[04000000]              add ebx, dword[e];ebx=a*b-a*b-(100-c)/b*b+e
    55 00000047 89D8                        mov eax,ebx 
    56 00000049 99                          cdq
    57 0000004A 0305[08000000]              add eax,dword [x]
    58 00000050 1315[0C000000]              adc edx,dword [x+4];edx=eax=a*b-(100-c)/(b*b)+e+x
    59 00000056 A3[10000000]                mov[rez],eax
    60 0000005B 8915[14000000]              mov [rez+4],edx 
    61                                      
    62                                      
    63                                          ; exit(0)
    64 00000061 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    65 00000063 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
