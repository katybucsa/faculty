/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using CompanyMode;
using CompanyModel;
using Thrift.Protocol;
using Thrift.Transport;

namespace CompanyClient
{
  public partial class IServer {
    public interface ISync {
      int login(User u);
      string bookPlaces(Ride ride, Clientj c, int nrplaces);
      List<RBooking> findAllRBookings(string dest, string date, string hour);
      void logout(User u);
      List<Ride> findAllRides();
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_login(AsyncCallback callback, object state, User u);
      int End_login(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_bookPlaces(AsyncCallback callback, object state, Ride ride, Clientj c, int nrplaces);
      string End_bookPlaces(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_findAllRBookings(AsyncCallback callback, object state, string dest, string date, string hour);
      List<RBooking> End_findAllRBookings(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_logout(AsyncCallback callback, object state, User u);
      void End_logout(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_findAllRides(AsyncCallback callback, object state);
      List<Ride> End_findAllRides(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_login(AsyncCallback callback, object state, User u)
      {
        return send_login(callback, state, u);
      }

      public int End_login(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_login();
      }

      #endif

      public int login(User u)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_login(null, null, u);
        return End_login(asyncResult);

        #else
        send_login(u);
        return recv_login();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_login(AsyncCallback callback, object state, User u)
      {
        oprot_.WriteMessageBegin(new TMessage("login", TMessageType.Call, seqid_));
        login_args args = new login_args();
        args.U = u;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_login(User u)
      {
        oprot_.WriteMessageBegin(new TMessage("login", TMessageType.Call, seqid_));
        login_args args = new login_args();
        args.U = u;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public int recv_login()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        login_result result = new login_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "login failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_bookPlaces(AsyncCallback callback, object state, Ride ride, Clientj c, int nrplaces)
      {
        return send_bookPlaces(callback, state, ride, c, nrplaces);
      }

      public string End_bookPlaces(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_bookPlaces();
      }

      #endif

      public string bookPlaces(Ride ride, Clientj c, int nrplaces)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_bookPlaces(null, null, ride, c, nrplaces);
        return End_bookPlaces(asyncResult);

        #else
        send_bookPlaces(ride, c, nrplaces);
        return recv_bookPlaces();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_bookPlaces(AsyncCallback callback, object state, Ride ride, Clientj c, int nrplaces)
      {
        oprot_.WriteMessageBegin(new TMessage("bookPlaces", TMessageType.Call, seqid_));
        bookPlaces_args args = new bookPlaces_args();
        args.Ride = ride;
        args.C = c;
        args.Nrplaces = nrplaces;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_bookPlaces(Ride ride, Clientj c, int nrplaces)
      {
        oprot_.WriteMessageBegin(new TMessage("bookPlaces", TMessageType.Call, seqid_));
        bookPlaces_args args = new bookPlaces_args();
        args.Ride = ride;
        args.C = c;
        args.Nrplaces = nrplaces;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public string recv_bookPlaces()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        bookPlaces_result result = new bookPlaces_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "bookPlaces failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_findAllRBookings(AsyncCallback callback, object state, string dest, string date, string hour)
      {
        return send_findAllRBookings(callback, state, dest, date, hour);
      }

      public List<RBooking> End_findAllRBookings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_findAllRBookings();
      }

      #endif

      public List<RBooking> findAllRBookings(string dest, string date, string hour)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_findAllRBookings(null, null, dest, date, hour);
        return End_findAllRBookings(asyncResult);

        #else
        send_findAllRBookings(dest, date, hour);
        return recv_findAllRBookings();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_findAllRBookings(AsyncCallback callback, object state, string dest, string date, string hour)
      {
        oprot_.WriteMessageBegin(new TMessage("findAllRBookings", TMessageType.Call, seqid_));
        findAllRBookings_args args = new findAllRBookings_args();
        args.Dest = dest;
        args.Date = date;
        args.Hour = hour;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_findAllRBookings(string dest, string date, string hour)
      {
        oprot_.WriteMessageBegin(new TMessage("findAllRBookings", TMessageType.Call, seqid_));
        findAllRBookings_args args = new findAllRBookings_args();
        args.Dest = dest;
        args.Date = date;
        args.Hour = hour;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<RBooking> recv_findAllRBookings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        findAllRBookings_result result = new findAllRBookings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findAllRBookings failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_logout(AsyncCallback callback, object state, User u)
      {
        return send_logout(callback, state, u);
      }

      public void End_logout(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_logout();
      }

      #endif

      public void logout(User u)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_logout(null, null, u);
        End_logout(asyncResult);

        #else
        send_logout(u);
        recv_logout();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_logout(AsyncCallback callback, object state, User u)
      {
        oprot_.WriteMessageBegin(new TMessage("logout", TMessageType.Call, seqid_));
        logout_args args = new logout_args();
        args.U = u;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_logout(User u)
      {
        oprot_.WriteMessageBegin(new TMessage("logout", TMessageType.Call, seqid_));
        logout_args args = new logout_args();
        args.U = u;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public void recv_logout()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        logout_result result = new logout_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        return;
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_findAllRides(AsyncCallback callback, object state)
      {
        return send_findAllRides(callback, state);
      }

      public List<Ride> End_findAllRides(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_findAllRides();
      }

      #endif

      public List<Ride> findAllRides()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_findAllRides(null, null);
        return End_findAllRides(asyncResult);

        #else
        send_findAllRides();
        return recv_findAllRides();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_findAllRides(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("findAllRides", TMessageType.Call, seqid_));
        findAllRides_args args = new findAllRides_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_findAllRides()
      {
        oprot_.WriteMessageBegin(new TMessage("findAllRides", TMessageType.Call, seqid_));
        findAllRides_args args = new findAllRides_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<Ride> recv_findAllRides()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        findAllRides_result result = new findAllRides_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findAllRides failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["login"] = login_Process;
        processMap_["bookPlaces"] = bookPlaces_Process;
        processMap_["findAllRBookings"] = findAllRBookings_Process;
        processMap_["logout"] = logout_Process;
        processMap_["findAllRides"] = findAllRides_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void login_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        login_args args = new login_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        login_result result = new login_result();
        try
        {
          try
          {
            result.Success = iface_.login(args.U);
          }
          catch (AppException ex)
          {
            result.Ex = ex;
          }
          oprot.WriteMessageBegin(new TMessage("login", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("login", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void bookPlaces_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        bookPlaces_args args = new bookPlaces_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        bookPlaces_result result = new bookPlaces_result();
        try
        {
          result.Success = iface_.bookPlaces(args.Ride, args.C, args.Nrplaces);
          oprot.WriteMessageBegin(new TMessage("bookPlaces", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("bookPlaces", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void findAllRBookings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        findAllRBookings_args args = new findAllRBookings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        findAllRBookings_result result = new findAllRBookings_result();
        try
        {
          result.Success = iface_.findAllRBookings(args.Dest, args.Date, args.Hour);
          oprot.WriteMessageBegin(new TMessage("findAllRBookings", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("findAllRBookings", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void logout_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        logout_args args = new logout_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        logout_result result = new logout_result();
        try
        {
          try
          {
            iface_.logout(args.U);
          }
          catch (AppException ex)
          {
            result.Ex = ex;
          }
          oprot.WriteMessageBegin(new TMessage("logout", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("logout", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void findAllRides_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        findAllRides_args args = new findAllRides_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        findAllRides_result result = new findAllRides_result();
        try
        {
          result.Success = iface_.findAllRides();
          oprot.WriteMessageBegin(new TMessage("findAllRides", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("findAllRides", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class login_args : TBase
    {
      private User _u;

      public User U
      {
        get
        {
          return _u;
        }
        set
        {
          __isset.u = true;
          this._u = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool u;
      }

      public login_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  U = new User();
                  U.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("login_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (U != null && __isset.u) {
            field.Name = "u";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            U.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("login_args(");
        bool __first = true;
        if (U != null && __isset.u) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("U: ");
          __sb.Append(U== null ? "<null>" : U.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class login_result : TBase
    {
      private int _success;
      private AppException _ex;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public AppException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public login_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Ex = new AppException();
                  Ex.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("login_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.ex) {
            if (Ex != null) {
              field.Name = "Ex";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Ex.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("login_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class bookPlaces_args : TBase
    {
      private Ride _ride;
      private Clientj _c;
      private int _nrplaces;

      public Ride Ride
      {
        get
        {
          return _ride;
        }
        set
        {
          __isset.ride = true;
          this._ride = value;
        }
      }

      public Clientj C
      {
        get
        {
          return _c;
        }
        set
        {
          __isset.c = true;
          this._c = value;
        }
      }

      public int Nrplaces
      {
        get
        {
          return _nrplaces;
        }
        set
        {
          __isset.nrplaces = true;
          this._nrplaces = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ride;
        public bool c;
        public bool nrplaces;
      }

      public bookPlaces_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Ride = new Ride();
                  Ride.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  C = new Clientj();
                  C.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  Nrplaces = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("bookPlaces_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Ride != null && __isset.ride) {
            field.Name = "ride";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ride.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (C != null && __isset.c) {
            field.Name = "c";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            C.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.nrplaces) {
            field.Name = "nrplaces";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Nrplaces);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("bookPlaces_args(");
        bool __first = true;
        if (Ride != null && __isset.ride) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ride: ");
          __sb.Append(Ride== null ? "<null>" : Ride.ToString());
        }
        if (C != null && __isset.c) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("C: ");
          __sb.Append(C== null ? "<null>" : C.ToString());
        }
        if (__isset.nrplaces) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Nrplaces: ");
          __sb.Append(Nrplaces);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class bookPlaces_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public bookPlaces_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("bookPlaces_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("bookPlaces_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findAllRBookings_args : TBase
    {
      private string _dest;
      private string _date;
      private string _hour;

      public string Dest
      {
        get
        {
          return _dest;
        }
        set
        {
          __isset.dest = true;
          this._dest = value;
        }
      }

      public string Date
      {
        get
        {
          return _date;
        }
        set
        {
          __isset.date = true;
          this._date = value;
        }
      }

      public string Hour
      {
        get
        {
          return _hour;
        }
        set
        {
          __isset.hour = true;
          this._hour = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool dest;
        public bool date;
        public bool hour;
      }

      public findAllRBookings_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Dest = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Date = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Hour = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findAllRBookings_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Dest != null && __isset.dest) {
            field.Name = "dest";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Dest);
            oprot.WriteFieldEnd();
          }
          if (Date != null && __isset.date) {
            field.Name = "date";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Date);
            oprot.WriteFieldEnd();
          }
          if (Hour != null && __isset.hour) {
            field.Name = "hour";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Hour);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findAllRBookings_args(");
        bool __first = true;
        if (Dest != null && __isset.dest) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Dest: ");
          __sb.Append(Dest);
        }
        if (Date != null && __isset.date) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Date: ");
          __sb.Append(Date);
        }
        if (Hour != null && __isset.hour) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Hour: ");
          __sb.Append(Hour);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findAllRBookings_result : TBase
    {
      private List<RBooking> _success;

      public List<RBooking> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public findAllRBookings_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<RBooking>();
                    TList _list0 = iprot.ReadListBegin();
                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                    {
                      RBooking _elem2;
                      _elem2 = new RBooking();
                      _elem2.Read(iprot);
                      Success.Add(_elem2);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findAllRBookings_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (RBooking _iter3 in Success)
                {
                  _iter3.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findAllRBookings_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logout_args : TBase
    {
      private User _u;

      public User U
      {
        get
        {
          return _u;
        }
        set
        {
          __isset.u = true;
          this._u = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool u;
      }

      public logout_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  U = new User();
                  U.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("logout_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (U != null && __isset.u) {
            field.Name = "u";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            U.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("logout_args(");
        bool __first = true;
        if (U != null && __isset.u) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("U: ");
          __sb.Append(U== null ? "<null>" : U.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logout_result : TBase
    {
      private AppException _ex;

      public AppException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ex;
      }

      public logout_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Ex = new AppException();
                  Ex.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("logout_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.ex) {
            if (Ex != null) {
              field.Name = "Ex";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Ex.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("logout_result(");
        bool __first = true;
        if (Ex != null && __isset.ex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ex: ");
          __sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findAllRides_args : TBase
    {

      public findAllRides_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findAllRides_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findAllRides_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findAllRides_result : TBase
    {
      private List<Ride> _success;

      public List<Ride> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public findAllRides_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Ride>();
                    TList _list4 = iprot.ReadListBegin();
                    for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                    {
                      Ride _elem6;
                      _elem6 = new Ride();
                      _elem6.Read(iprot);
                      Success.Add(_elem6);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findAllRides_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Ride _iter7 in Success)
                {
                  _iter7.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findAllRides_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
