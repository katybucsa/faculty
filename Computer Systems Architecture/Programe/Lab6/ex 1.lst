     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 3132336162636465            s1 db '123ab','c','d','e'
    15 00000008 313233616200630064-         s2 dw '123ab','c','d','e'
    15 00000011 006500             
    16                                      l_s1 equ s2-s1
    17 00000014 <res 00000008>              d resb l_s1
    18 0000001C FF                          test_var db -1
    19 0000001D FF<rept>                    d1 times l_s1 db -1;rezerva spatiu in memorie pentru d1 stocand valoarea -1 de l_s1 ori
    20 00000025 FF                          test_var1 db -1
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25 00000000 B908000000                      mov ecx,l_s1
    26 00000005 BE00000000                      mov esi,0
    27                                          parcurge:
    28 0000000A 8A86[00000000]                      mov al,[s1+esi]
    29 00000010 46                                  inc esi
    30 00000011 E2F7                                loop parcurge
    31                                          ; exit(0)
    32 00000013 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    33 00000015 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
