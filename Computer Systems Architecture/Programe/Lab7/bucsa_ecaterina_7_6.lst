     1                                  ;Bucsa Ecaterina, grupa 211/2, 21.11.2017,laboratorul 7, problema 6
     2                                  
     3                                  bits 32 ; assembling for the 32 bits architecture
     4                                  
     5                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     6                                  global start        
     7                                  
     8                                  ; declare external functions needed by our program
     9                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    10                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 39302A51F4117B00CD-        sir dw 12345,20778,4596,123,0abcdh
    16 00000009 AB                 
    17                                     l equ ($-sir)/2
    18 0000000A 0A00                       zece dw 10
    19 0000000C 0000<rept>                 c times 5*l dw 0;sirul in care se retin toate cifrele numerelor din sir
    20                                     
    21                                     ;dest times  
    22                                      
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27                                          ;Dandu-se un sir de cuvinte sa se obtina sirul (de octeti) ;cifrelor in baza zece ale fiecarui cuvant din acest sir.
    28                                          ;Exemplu:
    29                                          ;daca avem sirul:
    30                                          ;sir DW 12345, 20778, 4596 
    31                                          ;obtinem rezultatul
    32                                          ;1, 2, 3, 4, 5, 2, 0, 7, 7, 8, 4, 5, 9, 6.
    33                                          
    34                                          
    35 00000000 B905000000                      mov ecx,l;parcurgem elementele sirului intr-o bucla loop cu l iteratii
    36 00000005 FC                              cld;parcurgem sirul de la stanga la dreapta
    37 00000006 E348                            jecxz final
    38 00000008 BE00000000                      mov esi,0;pornim de la primul element din sirul sursa
    39 0000000D BF00000000                      mov edi,0;stocam elementele in sirul c incepand cu prima pozitie
    40                                          repeta:
    41 00000012 668B86[00000000]                    mov ax,[sir+esi];in ax se stocheaza pe rand cate un element din sirul sursa
    42 00000019 66BA0000                            mov dx,0
    43 0000001D B300                                mov bl,0;in bl vom retine numarul de cifre al fiecarui element din sirul sursa
    44                                              repeta1:
    45 0000001F 66F735[0A000000]                        div word[zece];se fac impartiri succesive la 10 pentru o obtine toate cifrele unui element
    46 00000026 6652                                    push dx;stocam toate cifrele pe stiva 
    47 00000028 80C301                                  add bl,1
    48 0000002B 6683F800                               cmp ax,0
    49 0000002F 7406                                jz repeta2;daca catul este 0 inseamna ca am obtinut toate cifrele si putem parasi bucla repeta1
    50                                              
    51 00000031 66BA0000                            mov dx,0
    52 00000035 EBE8                                jmp repeta1
    53                                              repeta2:
    54 00000037 665A                                    pop dx;se scot de pe stiva toate cifrele unui element in ordinea aparitiei
    55 00000039 668997[0C000000]                        mov [c+edi],dx;se stocheaza cifrele in sirul destinatie
    56 00000040 47                                      inc edi
    57 00000041 80EB01                                  sub bl,1
    58 00000044 80FB00                                  cmp bl,0
    59 00000047 7402                                    jz sfarsit;daca am scos toate cifrele de pe stiva putem parasi bucla repeta2
    60 00000049 EBEC                                    jmp repeta2
    61                                              sfarsit:
    62 0000004B 83C602                              add esi,2
    63 0000004E E2C2                            loop repeta;daca ecx>0 se reia ciclul
    64                                          final:
    65                                          
    66                                          ; exit(0)
    67 00000050 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    68 00000052 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
