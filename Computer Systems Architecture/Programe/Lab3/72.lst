     1                                  ;Bucsa Ecaterina, grupa 211/2, 18.10.2017,laboratorul 3, problema 7
     2                                  ;a,b,c,d - qword
     3                                  ;(c+c+c)-b+(d-a)
     4                                  bits 32 ; assembling for the 32 bits architecture
     5                                  
     6                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     7                                  global start        
     8                                  
     9                                  ; declare external functions needed by our program
    10                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    11                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17 00000000 FEFFFFFFFFFFFFFF        a dq -2
    18 00000008 0300000000000000        b dq 3
    19 00000010 FCFFFFFFFFFFFFFF        c dq -4
    20 00000018 1900000000000000        d dq 25
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25 00000000 A1[10000000]                mov eax,dword[c]
    26 00000005 8B15[14000000]              mov edx,dword [c+4];edx:eax=c
    27 0000000B 0305[10000000]              add eax,dword [c]
    28 00000011 1315[14000000]              adc edx,dword [c+4];edx:eax=c+c
    29 00000017 0305[10000000]              add eax,dword [c]
    30 0000001D 1315[14000000]              adc edx,dword [c+4];edx:eax=c+c+c
    31 00000023 BA00000000                  mov edx,0
    32 00000028 2B05[08000000]              sub eax,dword [b]
    33 0000002E 1B15[0C000000]              sbb edx,dword [b+4]; edx:eax=(c+c+c)-b
    34 00000034 8B1D[18000000]              mov ebx,dword [d]
    35 0000003A 130D[1C000000]              adc ecx,dword [d+4];ecx:ebx=d
    36 00000040 2B1D[00000000]              sub ebx,dword[a]
    37 00000046 1B0D[04000000]              sbb ecx,dword[a+4];ecx:ebx=d-a
    38 0000004C 01D8                        add eax,ebx
    39 0000004E 11CA                        adc edx,ecx;edx:eax=ecx:ebx
    40                                          ; exit(0)
    41 00000050 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    42 00000052 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
