     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 0A                      a db 10
    15 00000001 2800                    b dw 40
    16                                  ; our code starts here
    17                                  segment code use32 class=code
    18                                      start:
    19                                          ; ...
    20 00000000 66A1[01000000]              mov  AX, [b] ;AX = b
    21 00000006 F635[00000000]          	div  BYTE [a] ;AL = AX / a = b / a È™i AH = AX % a = b % a
    22                                  	
    23 0000000C B402                    	mov  AH, 2 ;AH = 2
    24 0000000E F6E4                    	mul  AH ;AX = AL * AH = b / a * 2	
    25                                  	
    26 00000010 6683C00A                	add  AX, 10 ;AX = AX + b = b / a * 2 + 10
    27                                  	
    28 00000014 66F725[01000000]        	mul  word [b] ;DX:AX = AX * b = (b / a * 2 + 10) * b
    29                                  	
    30 0000001B 6652                    	push  DX ;se pune pe stiva partea high din double word-ul DX:AX
    31 0000001D 6650                    	push  AX ;se pune pe stiva partea low din double word-ul DX:AX
    32 0000001F 5B                      	pop  EBX ;EAX = DX:AX = (b / a * 2 + 10) * b
    33                                  	
    34 00000020 66A1[01000000]          	mov  AX, [b] ;AX = b
    35 00000026 66BA0F00                	mov  DX, 15 ;DX = 15
    36 0000002A 66F7E2                  	mul  DX ;DX:AX = b * 15
    37                                  	
    38 0000002D 6652                    	push  DX ;se pune pe stiva partea high din double word-ul DX:AX
    39 0000002F 6650                    	push  AX ;se pune pe stiva partea low din double word-ul DX:AX
    40 00000031 58                      	pop  EAX ;EAX = DX:AX = b * 15
    41                                  	
    42 00000032 29C3                    	sub  EBX, EAX ;EBX = EBX - EAX = (b / a * 2 + 10) * b - b * 15
    43                                          ; exit(0)
    44 00000034 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    45 00000036 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
