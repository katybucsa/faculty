     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 5777                        a dw 0111011101010111b
    15 00000002 BE9B                        b dw 1001101110111110b
    16 00000004 00000000                    c dd 0
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20                                          ; ...
    21                                          ;Se dau doua cuvinte A si B. Sa se obtina dublucuvantul C:
    22                                          ;bitii 0-4 ai lui C au valoarea 1
    23                                          ;bitii 5-11 ai lui C coincid cu bitii 0-6 ai lui A
    24                                          ;bitii 16-31 ai lui C au valoarea 0000000001100101b
    25                                          ;bitii 12-15 ai lui C coincid cu bitii 8-11 ai lui B
    26                                          
    27                                          
    28 00000000 BB00000000                      mov ebx,0
    29 00000005 83CB1F                          or ebx,00000000000000000000000000011111b
    30                                          
    31 00000008 66A1[00000000]                  mov ax,[a]
    32 0000000E 6683E07F                        and ax,0000000001111111b
    33 00000012 B105                            mov cl,5
    34 00000014 66D3C0                          rol ax,cl
    35 00000017 66BA0000                        mov dx,0
    36 0000001B 6652                            push dx
    37 0000001D 6650                            push ax
    38 0000001F 58                              pop eax
    39 00000020 09C3                            or ebx,eax
    40                                          
    41 00000022 66A1[02000000]                  mov ax,[b]
    42 00000028 6625000F                        and ax,0000111100000000b
    43 0000002C B104                            mov cl,4
    44 0000002E 66D3C0                          rol ax,cl
    45 00000031 66BA0000                        mov dx,0
    46 00000035 6652                            push dx
    47 00000037 6650                            push ax
    48 00000039 58                              pop eax
    49 0000003A 09C3                            or ebx,eax
    50                                          
    51 0000003C 81CB000000A6                    or ebx,10100110000000000000000000000000b
    52                                          
    53 00000042 891D[04000000]                  mov[c],ebx
    54                                          ; exit(0)
    55 00000048 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    56 0000004A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
