     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,scanf,printf,fread,fopen,fclose              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import fclose msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                  import scanf msvcrt.dll 
    11                                  import printf msvcrt.dll 
    12                                  import fread msvcrt.dll 
    13                                  import fopen msvcrt.dll                           ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18                                      len equ 20
    19                                      l_r equ 100
    20 00000000 257500                      format1 db '%u',0
    21 00000003 4E7520732D61207075-         mesaj db "Nu s-a putut creea fisierul",0
    21 0000000C 747574206372656561-
    21 00000015 20666973696572756C-
    21 0000001E 00                 
    22 0000001F 257300                      format db "%s",0
    23 00000022 00<rept>                    nume_fisier times len db 0
    24 00000036 00<rept>                    buffer times l_r+1  db 0
    25 0000009B 257300                      format_s db "%s",0
    26 0000009E FFFFFFFF                    handle_1 dd -1
    27 000000A2 7200                        modr db "r",0
    28 000000A4 0000                        cuv db 0,0
    29                                      
    30                                      
    31                                  ; our code starts here
    32                                  segment code use32 class=code
    33                                      start:
    34                                          ; ...
    35                                          
    36 00000000 68[22000000]                    push dword nume_fisier
    37 00000005 68[9B000000]                    push dword format_s
    38 0000000A FF15[00000000]                  call [scanf]
    39 00000010 83C408                          add esp, 4*2
    40 00000013 68[A4000000]                    push dword cuv
    41 00000018 68[9B000000]                    push dword format_s
    42 0000001D FF15[00000000]                  call [scanf]
    43 00000023 83C408                          add esp,4*2
    44 00000026 68[A2000000]                    push dword modr
    45 0000002B 68[22000000]                    push dword nume_fisier
    46 00000030 FF15[00000000]                  call [fopen]
    47 00000036 83C408                          add esp,4*2
    48                                          
    49 00000039 BB00000000                      mov ebx,0
    50                                              
    51                                          
    52 0000003E 83F800                          cmp eax,0
    53 00000041 745F                            je eroare_fisier
    54 00000043 BF[A4000000]                    mov edi,cuv
    55 00000048 A3[9E000000]                    mov [handle_1],eax
    56                                          repeta:
    57 0000004D FF35[9E000000]                      push dword [handle_1]
    58 00000053 6A64                                push dword l_r
    59 00000055 6A01                                push dword 1
    60 00000057 68[36000000]                        push dword buffer
    61 0000005C FF15[00000000]                      call [fread]
    62 00000062 83C410                              add esp, 4*4
    63                                              
    64 00000065 BE[36000000]                        mov esi,buffer
    65 0000006A 50                                  push eax
    66                                              repeta1:
    67 0000006B A6                                      cmpsb 
    68 0000006C 7502                                    jne et
    69 0000006E EB05                                    jmp fin 
    70                                                  et:
    71 00000070 BF[A4000000]                                mov edi,cuv
    72                                                  fin:
    73 00000075 803F00                                      cmp byte [edi],0
    74 00000078 7407                                        jz adauga
    75 0000007A 803E00                                      cmp byte [esi],0
    76 0000007D 740C                                        jz final1
    77 0000007F EBEA                                        jmp repeta1
    78                                                      adauga:
    79 00000081 83C301                                          add ebx,1
    80 00000084 BF[A4000000]                                    mov edi,cuv
    81 00000089 EBE0                                            jmp repeta1
    82                                                          
    83                                                  final1:
    84 0000008B 58                                      pop eax 
    85 0000008C 83F864                                  cmp eax,l_r
    86 0000008F 74BC                                    je repeta
    87 00000091 FF35[9E000000]                      push dword [handle_1]
    88 00000097 FF15[00000000]                      call [fclose]
    89 0000009D 83C404                              add esp,4
    90 000000A0 EB13                                jmp ext    
    91                                                  
    92                                             
    93                                              
    94                                          eroare_fisier:
    95 000000A2 68[03000000]                        push dword mesaj
    96 000000A7 68[1F000000]                        push dword format
    97 000000AC FF15[00000000]                      call [printf]
    98 000000B2 83C408                              add esp, 4*2
    99                                          ext:
   100 000000B5 53                                  push ebx 
   101 000000B6 68[00000000]                        push dword format1
   102 000000BB FF15[00000000]                      call [printf]
   103 000000C1 83C408                              add esp,4*2
   104                                          ; exit(0)
   105 000000C4 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   106 000000C6 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
