     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,scanf,fprintf,fopen,fclose,printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll 
    10                                  import fprintf msvcrt.dll 
    11                                  import fopen msvcrt.dll 
    12                                  import fclose msvcrt.dll
    13                                  import printf msvcrt.dll                           ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18                                      l equ 20
    19 00000000 6164732E74787400            nume db 'ads.txt',0
    20 00000008 2573200A00                  format db '%s',32,10,0
    21 0000000D FFFFFFFF                    handle dd -1
    22 00000011 6100                        moda db 'a',0
    23 00000013 0000<rept>                  cuv times l db 0,0
    24 0000003B 4E7520732D61207075-         mesaj db 'Nu s-a putut creea fisierul',0
    24 00000044 747574206372656561-
    24 0000004D 20666973696572756C-
    24 00000056 00                 
    25                                      
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ; ...
    30                                          ;Se da un nume de fisier (definit in segmentul de date). Sa se creeze un fisier cu numele dat, apoi sa se citeasca de la tastatura cuvinte si sa se scrie in fisier cuvintele citite pana cand se citeste de la
    31 00000000 68[11000000]                    push dword moda
    32 00000005 68[00000000]                    push dword nume
    33 0000000A FF15[00000000]                  call [fopen]
    34 00000010 83C408                          add esp,4*2
    35                                          
    36 00000013 83F800                          cmp eax,0
    37 00000016 7444                            je eroare
    38                                          
    39 00000018 A3[0D000000]                    mov [handle],eax 
    40                                          repet:
    41 0000001D 68[13000000]                        push dword cuv 
    42 00000022 68[08000000]                        push dword format
    43 00000027 FF15[00000000]                      call [scanf]
    44 0000002D 83C408                              add esp,4*2 
    45 00000030 8B1D[13000000]                      mov ebx,[cuv] 
    46 00000036 83FB61                              cmp ebx,'a'
    47 00000039 7434                                je fine
    48                                              
    49 0000003B 68[13000000]                        push dword cuv
    50 00000040 FF35[0D000000]                      push dword [handle]
    51 00000046 FF15[00000000]                      call [fprintf]
    52 0000004C 83C408                              add esp,4*2
    53 0000004F BA00000000                          mov edx,0
    54 00000054 8915[13000000]                      mov [cuv],edx 
    55 0000005A EBC1                                jmp repet
    56                                          
    57                                          
    58                                          
    59                                          
    60                                          
    61                                          eroare:
    62 0000005C 68[3B000000]                        push dword mesaj 
    63 00000061 68[08000000]                        push dword format
    64 00000066 FF15[00000000]                      call [printf]
    65 0000006C 83C408                              add esp,4*2
    66                                          fine:    
    67 0000006F FF35[0D000000]                      push dword [handle]
    68 00000075 FF15[00000000]                      call [fclose]
    69 0000007B 83C404                              add esp,4
    70                                          ; exit(0)
    71 0000007E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    72 00000080 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
