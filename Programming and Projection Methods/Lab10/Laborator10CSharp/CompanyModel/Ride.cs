/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using CompanyModel;
using Thrift.Protocol;
using Thrift.Transport;

namespace CompanyMode

{

#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class Ride : TBase, IHasID<int>
    {
        private string _places;

        public int Id { get; set; }

        public string Destination { get; set; }

        public string Date { get; set; }

        public string Hour { get; set; }

        public int NrPlacesAvailable { get { return Places.Count(x => x.Equals('0')) - 1; } }

        public string Places
        {
            get
            {
                return _places;
            }
            set
            {
                __isset.places = true;
                this._places = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool places;
        }

        public Ride()
        {
        }

        public Ride(int ride_id, string destination, string date, string hour) : this()
        {
            this.Id = ride_id;
            this.Destination = destination;
            this.Date = date;
            this.Hour = hour;
            this.Places = "0000000000000000000";
        }

        public void Read(TProtocol iprot)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                bool isset_ride_id = false;
                bool isset_destination = false;
                bool isset_date = false;
                bool isset_hour = false;
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.I32)
                            {
                                Id = iprot.ReadI32();
                                isset_ride_id = true;
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                Destination = iprot.ReadString();
                                isset_destination = true;
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.String)
                            {
                                Date = iprot.ReadString();
                                isset_date = true;
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 4:
                            if (field.Type == TType.String)
                            {
                                Hour = iprot.ReadString();
                                isset_hour = true;
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 5:
                            if (field.Type == TType.String)
                            {
                                Places = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
                if (!isset_ride_id)
                    throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Ride_id not set");
                if (!isset_destination)
                    throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Destination not set");
                if (!isset_date)
                    throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Date not set");
                if (!isset_hour)
                    throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Hour not set");
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("Ride");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                field.Name = "ride_id";
                field.Type = TType.I32;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(Id);
                oprot.WriteFieldEnd();
                if (Destination == null)
                    throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Destination not set");
                field.Name = "destination";
                field.Type = TType.String;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Destination);
                oprot.WriteFieldEnd();
                if (Date == null)
                    throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Date not set");
                field.Name = "date";
                field.Type = TType.String;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Date);
                oprot.WriteFieldEnd();
                if (Hour == null)
                    throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Hour not set");
                field.Name = "hour";
                field.Type = TType.String;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Hour);
                oprot.WriteFieldEnd();
                if (Places != null && __isset.places)
                {
                    field.Name = "places";
                    field.Type = TType.String;
                    field.ID = 5;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Places);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("Ride(");
            __sb.Append(", Ride_id: ");
            __sb.Append(Id);
            __sb.Append(", Destination: ");
            __sb.Append(Destination);
            __sb.Append(", Date: ");
            __sb.Append(Date);
            __sb.Append(", Hour: ");
            __sb.Append(Hour);
            if (Places != null && __isset.places)
            {
                __sb.Append(", Places: ");
                __sb.Append(Places);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }

}
