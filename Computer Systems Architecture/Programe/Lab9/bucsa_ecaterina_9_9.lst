     1                                  ;Bucsa Ecaterina, grupa 211/2, 10.12.2017,laboratorul 9, problema 9
     2                                  
     3                                  bits 32 ; assembling for the 32 bits architecture
     4                                  
     5                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     6                                  global start        
     7                                  
     8                                  ; declare external functions needed by our program
     9                                  extern exit,fopen,fclose,fread,printf               ; tell nasm that exit exists even if we won't be defining it
    10                                  import exit msvcrt.dll  
    11                                  import fopen msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  import fread msvcrt.dll
    14                                  import printf msvcrt.dll  ; exit is a function that ends the calling process. It is         defined in msvcrt.dll
    15                                                                      ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    16                                  
    17                                  ; our data is declared here (the variables needed by our program)
    18                                  segment data use32 class=data
    19                                      ; ...
    20 00000000 6369746972652E7478-         nume_fis db 'citire.txt',0; numele fisierului ce va fi deschis 
    20 00000009 7400               
    21 0000000B 7200                        mod_acces db 'r',0; modul de deschidere a fisierului, r- pentru citire 
    22 0000000D FFFFFFFF                    descriptor_fis dd -1
    23 00000011 00000000                    nr_car_citite dd 0; variabila in care se salveaza numarul de caractere citite in etapa curenta
    24                                      len equ 1; numarul de caractere citite din fisier intr-o etapa 
    25 00000015 <res 00000001>              a resb len; in variabila a se va citi fiecare caracter din fisier
    26 00000016 436172616374657275-         format db 'Caracterul %c apare de %d ori',0; formatul de afisare pe ecran
    26 0000001F 6C2025632061706172-
    26 00000028 65206465202564206F-
    26 00000031 726900             
    27 00000034 00000000                    ap dd 0; la finalul programului in ap se va memora numarul maxim de aparitii ale unui caracter special din fisier
    28 00000038 00000000                    el dd 0; in  el se va afla la finalul programului caracterul special cu numarul maxim de aparitii
    29 0000003C 00000000                    len_c dd 0; lungimea sirului de caractere speciale format din caracterele textului din fisier
    30 00000040 00                          c  db 0; in c se va memora sirul cu caracterele speciale din fisier
    31                                  ; our code starts here
    32                                  segment code use32 class=code
    33                                      start:
    34                                          ; ...
    35                                          ;Se da un fisier text. Sa se citeasca continutul fisierului, sa se determine caracterul special (diferit de litera) cu ;cea mai mare frecventa si sa se afiseze acel caracter, impreuna cu frecventa acestuia. 
    36                                          ;Numele fisierului text este definit in segmentul de date.
    37                                          
    38 00000000 68[0B000000]                    push dword mod_acces
    39 00000005 68[00000000]                    push dword nume_fis
    40 0000000A FF15[00000000]                  call [fopen]; se apeleaza functia fopen pentru a deschide fisierul; functia va returna in EAX descriptorul fisierului sau 0 in caz de eroare
    41 00000010 83C408                          add esp, 4*2; se elibereaza parametrii de pe stiva 
    42                                          
    43 00000013 A3[0D000000]                    mov [descriptor_fis],eax; se salveaza valoarea returnata de fopen in descriptor_fis
    44                                          
    45 00000018 83F800                          cmp eax,0; verificam daca functia fopen a deschis cu succes fisierul(Eax!=0)
    46 0000001B 7469                            je final
    47                                          
    48                                          
    49 0000001D BF00000000                      mov edi,0
    50                                          bucla:
    51                                              ; se citeste un caracter di fisier
    52 00000022 FF35[0D000000]                      push dword [descriptor_fis]
    53 00000028 6A01                                push dword len
    54 0000002A 6A01                                push dword 1
    55 0000002C 68[15000000]                        push dword a
    56 00000031 FF15[00000000]                      call [fread]
    57 00000037 83C410                              add esp, 4*4
    58                                             
    59                                              ;eax=numarul de caractere citite 
    60 0000003A 83F800                              cmp eax, 0; daca numarul de caractere citite este 0, am terminat de parcurs fisierul
    61 0000003D 7432                                je cleanup
    62                                              
    63 0000003F A3[11000000]                        mov [nr_car_citite],eax; salvam numarul de caractere citite
    64                                              
    65 00000044 8A1D[15000000]                      mov bl,[a]; memoram in bl caracterul citit din fisier 
    66                                              
    67                                              ; verificam daca in bl este un caracter special(diferit de litera)
    68                                              
    69                                              ;cmp bl,'0'
    70                                              ;jl adauga
    71                                           
    72                                              ;cmp bl,'z'
    73                                              ;jg adauga
    74                                                  
    75                                              ;cmp bl,'A'
    76                                              ;jl e1
    77                                             
    78                                              ;cmp bl,'Z'
    79                                              ;jg e2
    80                                              ;jmp sfarsit
    81                                              
    82                                              ;e1:
    83                                              ;    cmp bl,'9'
    84                                              ;    jg adauga
    85                                              ;    jmp sfarsit
    86                                                  
    87                                              ;e2:
    88                                              ;    cmp bl,'a'
    89                                              ;    jl adauga
    90                                              ;    jmp sfarsit
    91                                                  
    92                                                  
    93                                              
    94 0000004A 80FB41                              cmp bl,'A'
    95 0000004D 7C17                                jl adauga
    96 0000004F EB00                                jmp et
    97                                              
    98                                              et:
    99 00000051 80FB7A                              cmp bl,'z'
   100 00000054 7F10                                jg adauga
   101 00000056 EB00                                jmp et1
   102                                              
   103                                              et1:
   104 00000058 80FB61                              cmp bl,'a'
   105 0000005B 7C02                                jl et2
   106 0000005D EB10                                jmp sfarsit
   107                                              
   108                                              et2:
   109 0000005F 80FB5A                                 cmp bl,'Z'
   110 00000062 7F02                                   jg adauga
   111 00000064 EB09                                   jmp sfarsit
   112                                                 
   113                                              ;se adauga caracterul special in sirul c
   114                                              adauga:
   115 00000066 889F[40000000]                          mov [c+edi],bl
   116 0000006C 47                                      inc edi
   117 0000006D EB00                                    jmp sfarsit
   118                                                  
   119                                              sfarsit:  
   120 0000006F EBB1                                jmp bucla; reluam bucla pentru a citi urmatorul caracter din fisier  
   121                                              
   122                                          cleanup:
   123 00000071 FF35[0D000000]                      push dword [descriptor_fis]
   124 00000077 FF15[00000000]                      call [fclose]; se apeleaza functia fclose pentru a inchide fisierul
   125 0000007D 83C404                              add esp, 4; eliberam parametrii de pe stiva 
   126 00000080 893D[3C000000]                      mov [len_c],edi
   127                                              
   128                                          final:
   129 00000086 BB00000000                          mov ebx,0; in bl se va stoca numarul maxim de aparitii ale unui caracter in sirul c
   130 0000008B BE[40000000]                        mov esi,c
   131 00000090 FC                                  cld; se parcurge de la stanga la dreapta sirul c 
   132 00000091 8B0D[3C000000]                      mov ecx,[len_c]
   133 00000097 E333                                jecxz finalp; parcurgem sirul c in bucla repeta cu len_c iteratii
   134                                              repeta:
   135 00000099 AC                                      lodsb; in al se incarca octetul curent din c 
   136 0000009A BA00000000                              mov edx,0; in dl memoram numarul de aparitii ale caracterului din al in sirul c 
   137 0000009F 8B3D[3C000000]                          mov edi,[len_c]
   138 000000A5 4F                                      dec edi
   139                                                  ; parcurgem pentru fiecare element din sirul c, intreg sirul c insa de la dreapta la stanga
   140                                                  repeta1:
   141 000000A6 3A87[40000000]                              cmp al,[c+edi]
   142 000000AC 7402                                        je et3; 
   143 000000AE EB12                                        jmp sfarsit1
   144                                                  
   145                                                  et3:
   146 000000B0 83C201                                      add edx,1
   147 000000B3 39DA                                        cmp edx,ebx; daca caracterul curent are un  numar de aparitii mai mare decat numarul maxim salvam caracterul si numarul sau de aparitii prin jump la et4
   148 000000B5 7F02                                        jg et4
   149 000000B7 EB09                                        jmp sfarsit1
   150                                              
   151                                                  et4:
   152 000000B9 89D3                                        mov ebx,edx
   153 000000BB A2[38000000]                                mov [el],al
   154 000000C0 EB00                                        jmp sfarsit1
   155                                              
   156                                                  sfarsit1:
   157 000000C2 4F                                          dec edi
   158 000000C3 83FFFF                                      cmp edi,-1
   159 000000C6 7402                                        je finalp1
   160                                                      
   161 000000C8 EBDC                                        jmp repeta1
   162                                              
   163                                                  finalp1:
   164 000000CA E2CD                                        loop repeta; daca mai sunt elemente de parcurs(ecx>0) se reia ciclul
   165                                                  finalp:
   166                                                      ;afisam caracterul special cu numarul maxim de aparitii
   167 000000CC 891D[34000000]                              mov [ap],ebx
   168 000000D2 FF35[34000000]                              push dword [ap]; se pune pe stiva valoarea lui ap 
   169 000000D8 FF35[38000000]                              push dword [el]; se pune pe stiva valoarea lui el 
   170 000000DE 68[16000000]                                push dword format; se pune pe stiva adresa string-ului format
   171 000000E3 FF15[00000000]                              call [printf]; se apeleaza functia printf pentru afisare
   172 000000E9 83C40C                                      add esp,4*3; se elibereaza parametrii de pe stiva
   173                                              
   174                                          ; exit(0)
   175 000000EC 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   176 000000EE FF15[00000000]                  call    [exit]       ; call exit to terminate the program
