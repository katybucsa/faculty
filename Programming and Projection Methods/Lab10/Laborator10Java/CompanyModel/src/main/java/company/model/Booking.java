/**
 * Autogenerated by Thrift Compiler (0.12.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package company.model;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-05-03")
public class Booking implements org.apache.thrift.TBase<Booking, Booking._Fields>, java.io.Serializable, Cloneable, Comparable<Booking>, HasID<Pair<Clientj, Ride>> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Booking");

    private static final org.apache.thrift.protocol.TField CLIENT_FIELD_DESC = new org.apache.thrift.protocol.TField("client", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
    private static final org.apache.thrift.protocol.TField RIDE_FIELD_DESC = new org.apache.thrift.protocol.TField("ride", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
    private static final org.apache.thrift.protocol.TField NR_PLACES_WANTED_FIELD_DESC = new org.apache.thrift.protocol.TField("nr_places_wanted", org.apache.thrift.protocol.TType.I32, (short) 3);
    private static final org.apache.thrift.protocol.TField PLACES_FIELD_DESC = new org.apache.thrift.protocol.TField("places", org.apache.thrift.protocol.TType.STRING, (short) 4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BookingStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BookingTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable
    Clientj client; // required
    public @org.apache.thrift.annotation.Nullable
    Ride ride; // required
    public int nr_places_wanted; // required
    public @org.apache.thrift.annotation.Nullable
    java.lang.String places; // required

    @Override
    public Pair<Clientj, Ride> getID() {
        return new Pair<>(this.client, this.ride);
    }

    @Override
    public void setID(Pair<Clientj, Ride> clientjRidePair) {
        this.client = clientjRidePair.getKey();
        this.ride = clientjRidePair.getValue();
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        CLIENT((short) 1, "client"),
        RIDE((short) 2, "ride"),
        NR_PLACES_WANTED((short) 3, "nr_places_wanted"),
        PLACES((short) 4, "places");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // CLIENT
                    return CLIENT;
                case 2: // RIDE
                    return RIDE;
                case 3: // NR_PLACES_WANTED
                    return NR_PLACES_WANTED;
                case 4: // PLACES
                    return PLACES;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __NR_PLACES_WANTED_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.CLIENT, new org.apache.thrift.meta_data.FieldMetaData("client", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Clientj.class)));
        tmpMap.put(_Fields.RIDE, new org.apache.thrift.meta_data.FieldMetaData("ride", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Ride.class)));
        tmpMap.put(_Fields.NR_PLACES_WANTED, new org.apache.thrift.meta_data.FieldMetaData("nr_places_wanted", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "int")));
        tmpMap.put(_Fields.PLACES, new org.apache.thrift.meta_data.FieldMetaData("places", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Booking.class, metaDataMap);
    }

    public Booking() {
    }

    public Booking(
            Clientj client,
            Ride ride,
            int nr_places_wanted,
            java.lang.String places) {
        this();
        this.client = client;
        this.ride = ride;
        this.nr_places_wanted = nr_places_wanted;
        setNr_places_wantedIsSet(true);
        this.places = places;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Booking(Booking other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetClient()) {
            this.client = new Clientj(other.client);
        }
        if (other.isSetRide()) {
            this.ride = new Ride(other.ride);
        }
        this.nr_places_wanted = other.nr_places_wanted;
        if (other.isSetPlaces()) {
            this.places = other.places;
        }
    }

    public Booking deepCopy() {
        return new Booking(this);
    }

    @Override
    public void clear() {
        this.client = null;
        this.ride = null;
        setNr_places_wantedIsSet(false);
        this.nr_places_wanted = 0;
        this.places = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Clientj getClient() {
        return this.client;
    }

    public Booking setClient(@org.apache.thrift.annotation.Nullable Clientj client) {
        this.client = client;
        return this;
    }

    public void unsetClient() {
        this.client = null;
    }

    /**
     * Returns true if field client is set (has been assigned a value) and false otherwise
     */
    public boolean isSetClient() {
        return this.client != null;
    }

    public void setClientIsSet(boolean value) {
        if (!value) {
            this.client = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public Ride getRide() {
        return this.ride;
    }

    public Booking setRide(@org.apache.thrift.annotation.Nullable Ride ride) {
        this.ride = ride;
        return this;
    }

    public void unsetRide() {
        this.ride = null;
    }

    /**
     * Returns true if field ride is set (has been assigned a value) and false otherwise
     */
    public boolean isSetRide() {
        return this.ride != null;
    }

    public void setRideIsSet(boolean value) {
        if (!value) {
            this.ride = null;
        }
    }

    public int getNr_places_wanted() {
        return this.nr_places_wanted;
    }

    public Booking setNr_places_wanted(int nr_places_wanted) {
        this.nr_places_wanted = nr_places_wanted;
        setNr_places_wantedIsSet(true);
        return this;
    }

    public void unsetNr_places_wanted() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NR_PLACES_WANTED_ISSET_ID);
    }

    /**
     * Returns true if field nr_places_wanted is set (has been assigned a value) and false otherwise
     */
    public boolean isSetNr_places_wanted() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NR_PLACES_WANTED_ISSET_ID);
    }

    public void setNr_places_wantedIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NR_PLACES_WANTED_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPlaces() {
        return this.places;
    }

    public Booking setPlaces(@org.apache.thrift.annotation.Nullable java.lang.String places) {
        this.places = places;
        return this;
    }

    public void unsetPlaces() {
        this.places = null;
    }

    /**
     * Returns true if field places is set (has been assigned a value) and false otherwise
     */
    public boolean isSetPlaces() {
        return this.places != null;
    }

    public void setPlacesIsSet(boolean value) {
        if (!value) {
            this.places = null;
        }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case CLIENT:
                if (value == null) {
                    unsetClient();
                } else {
                    setClient((Clientj) value);
                }
                break;

            case RIDE:
                if (value == null) {
                    unsetRide();
                } else {
                    setRide((Ride) value);
                }
                break;

            case NR_PLACES_WANTED:
                if (value == null) {
                    unsetNr_places_wanted();
                } else {
                    setNr_places_wanted((java.lang.Integer) value);
                }
                break;

            case PLACES:
                if (value == null) {
                    unsetPlaces();
                } else {
                    setPlaces((java.lang.String) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case CLIENT:
                return getClient();

            case RIDE:
                return getRide();

            case NR_PLACES_WANTED:
                return getNr_places_wanted();

            case PLACES:
                return getPlaces();

        }
        throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case CLIENT:
                return isSetClient();
            case RIDE:
                return isSetRide();
            case NR_PLACES_WANTED:
                return isSetNr_places_wanted();
            case PLACES:
                return isSetPlaces();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that == null)
            return false;
        if (that instanceof Booking)
            return this.equals((Booking) that);
        return false;
    }

    public boolean equals(Booking that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_client = true && this.isSetClient();
        boolean that_present_client = true && that.isSetClient();
        if (this_present_client || that_present_client) {
            if (!(this_present_client && that_present_client))
                return false;
            if (!this.client.equals(that.client))
                return false;
        }

        boolean this_present_ride = true && this.isSetRide();
        boolean that_present_ride = true && that.isSetRide();
        if (this_present_ride || that_present_ride) {
            if (!(this_present_ride && that_present_ride))
                return false;
            if (!this.ride.equals(that.ride))
                return false;
        }

        boolean this_present_nr_places_wanted = true;
        boolean that_present_nr_places_wanted = true;
        if (this_present_nr_places_wanted || that_present_nr_places_wanted) {
            if (!(this_present_nr_places_wanted && that_present_nr_places_wanted))
                return false;
            if (this.nr_places_wanted != that.nr_places_wanted)
                return false;
        }

        boolean this_present_places = true && this.isSetPlaces();
        boolean that_present_places = true && that.isSetPlaces();
        if (this_present_places || that_present_places) {
            if (!(this_present_places && that_present_places))
                return false;
            if (!this.places.equals(that.places))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetClient()) ? 131071 : 524287);
        if (isSetClient())
            hashCode = hashCode * 8191 + client.hashCode();

        hashCode = hashCode * 8191 + ((isSetRide()) ? 131071 : 524287);
        if (isSetRide())
            hashCode = hashCode * 8191 + ride.hashCode();

        hashCode = hashCode * 8191 + nr_places_wanted;

        hashCode = hashCode * 8191 + ((isSetPlaces()) ? 131071 : 524287);
        if (isSetPlaces())
            hashCode = hashCode * 8191 + places.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(Booking other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.valueOf(isSetClient()).compareTo(other.isSetClient());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetClient()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.client, other.client);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetRide()).compareTo(other.isSetRide());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRide()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ride, other.ride);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetNr_places_wanted()).compareTo(other.isSetNr_places_wanted());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetNr_places_wanted()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nr_places_wanted, other.nr_places_wanted);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetPlaces()).compareTo(other.isSetPlaces());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPlaces()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.places, other.places);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("Booking(");
        boolean first = true;

        sb.append("client:");
        if (this.client == null) {
            sb.append("null");
        } else {
            sb.append(this.client);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("ride:");
        if (this.ride == null) {
            sb.append("null");
        } else {
            sb.append(this.ride);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("nr_places_wanted:");
        sb.append(this.nr_places_wanted);
        first = false;
        if (!first) sb.append(", ");
        sb.append("places:");
        if (this.places == null) {
            sb.append("null");
        } else {
            sb.append(this.places);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        if (client == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'client' was not present! Struct: " + toString());
        }
        if (ride == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'ride' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'nr_places_wanted' because it's a primitive and you chose the non-beans generator.
        if (places == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'places' was not present! Struct: " + toString());
        }
        // check for sub-struct validity
        if (client != null) {
            client.validate();
        }
        if (ride != null) {
            ride.validate();
        }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class BookingStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public BookingStandardScheme getScheme() {
            return new BookingStandardScheme();
        }
    }

    private static class BookingStandardScheme extends org.apache.thrift.scheme.StandardScheme<Booking> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, Booking struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // CLIENT
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.client = new Clientj();
                            struct.client.read(iprot);
                            struct.setClientIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // RIDE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.ride = new Ride();
                            struct.ride.read(iprot);
                            struct.setRideIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // NR_PLACES_WANTED
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.nr_places_wanted = iprot.readI32();
                            struct.setNr_places_wantedIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // PLACES
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.places = iprot.readString();
                            struct.setPlacesIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            if (!struct.isSetNr_places_wanted()) {
                throw new org.apache.thrift.protocol.TProtocolException("Required field 'nr_places_wanted' was not found in serialized data! Struct: " + toString());
            }
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, Booking struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.client != null) {
                oprot.writeFieldBegin(CLIENT_FIELD_DESC);
                struct.client.write(oprot);
                oprot.writeFieldEnd();
            }
            if (struct.ride != null) {
                oprot.writeFieldBegin(RIDE_FIELD_DESC);
                struct.ride.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(NR_PLACES_WANTED_FIELD_DESC);
            oprot.writeI32(struct.nr_places_wanted);
            oprot.writeFieldEnd();
            if (struct.places != null) {
                oprot.writeFieldBegin(PLACES_FIELD_DESC);
                oprot.writeString(struct.places);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class BookingTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public BookingTupleScheme getScheme() {
            return new BookingTupleScheme();
        }
    }

    private static class BookingTupleScheme extends org.apache.thrift.scheme.TupleScheme<Booking> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Booking struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            struct.client.write(oprot);
            struct.ride.write(oprot);
            oprot.writeI32(struct.nr_places_wanted);
            oprot.writeString(struct.places);
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Booking struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            struct.client = new Clientj();
            struct.client.read(iprot);
            struct.setClientIsSet(true);
            struct.ride = new Ride();
            struct.ride.read(iprot);
            struct.setRideIsSet(true);
            struct.nr_places_wanted = iprot.readI32();
            struct.setNr_places_wantedIsSet(true);
            struct.places = iprot.readString();
            struct.setPlacesIsSet(true);
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

